# Format of this file:
# Keyword	Arg1	Arg2	Arg3	...
# "Keyword" is a set of predefined strings (case-insensitive)
# It can contain space
# e.g. "No Class Before", "Day Off On"
# There can be multiple TABs separating the keyword and arguments
# e.g. Keyword Bla Bla Bla\t\t\tArg1\tArg2\t\tArg3
# Hash symbol (#) is comment

No Class Before		Everyday		9
No Class After		Everyday		18
# AKA No Class Between	Everyday	9		18
No Class Before		Mon				12
No Class Before		Tue				13
Day Off On			Wed
# AKA No Class Between	Wed	8	22	OR
# AKA No Class After	Wed	8		OR
# AKA No Class Before	Wed	23		OR
# AKA No Class Before	Wed	15		AND		No Class After	Wed	15
No Class Between	Thu				15		16
No Class After		Fri				16
No Class In Building	Everyday	CMC

####################################
# Start time of first session = 8am
# Start time of last session = 10pm

# Numbers represent all possible STARTING times
# Mon	[12,18)
# Tue	[13,18)
# Wed	---
# Thu	[9,15), [16,18)
# Fri	[9,16)

# Numbers represent all EXCLUDED STARTING times
# Mon	[8,11], [18,22]
# Tue	[8,12], [18,22]
# Wed	[8,22]
# Thu	[8,9), [15,16), [18,22]
# Fri	[8,9), [16,22]

# The notation [a,c) is used to indicate an interval from a to c that is inclusive 
# of a but exclusive of c. That is, [5,12) would be the set of all real numbers
# between 5 and 12, including 5 but not 12.


# Functions available (you can write some to wrap them)
# beforeTime(t) -> return ArrayList<Double> of all times before t by 1-hour interval, excluding t, since 8am
# afterTime(t) -> return ArrayList<Double> of all times after t by 1-hour interval, including t, until 10pm
# betweenTime(t1, t2) -> return ArrayList<Double> of all times after t by 1-hour interval, including t1 but not t2
# no need to t for check beforeTime and afterTime (you can check for range(i.e. [8,23]))
# checking for betweenTime is expected when processing the input file (range and t1 < t2). * when t1 = t2, return []
